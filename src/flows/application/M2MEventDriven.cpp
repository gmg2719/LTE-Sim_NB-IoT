/*
 * M2MEventDriven.cpp
 *
 *  Created on: 08/11/2016
 *      Author: great
 */

#include "M2MEventDriven.h"
#include "../../core/eventScheduler/simulator.h"
#include "../../utility/RandomVariable.h"
#include "../radio-bearer.h"
#include <math.h>
#include <stdlib.h>
#define MAX_TTI 350

const double M2MEventDriven::P[] = {0.0 , 0.0198013266932 , 0.0392105608477 , 0.0582354664158 , 0.0768836536134 , 0.095162581964 , 0.113079563283 , 0.130641764601 , 0.147856211034 , 0.164729788589 , 0.181269246922 , 0.197481202038 , 0.213372138933 , 0.228948414196 , 0.244216258544 , 0.259181779318 , 0.273850962926 , 0.288229677237 , 0.302323673929 , 0.316138590788 , 0.329679953964 , 0.342953180185 , 0.355963578917 , 0.368716354493 , 0.381216608194 , 0.393469340287 , 0.40547945203 , 0.417251747626 , 0.428790936151 , 0.440101633435 , 0.451188363906 , 0.462055562405 , 0.472707575957 , 0.483148665508 , 0.493383007634 , 0.503414696209 , 0.51324774404 , 0.522886084479 , 0.53233357299 , 0.541593988695 , 0.550671035883 , 0.559568345494 , 0.568289476571 , 0.576837917682 , 0.585217088318 , 0.593430340259 , 0.601480958915 , 0.609372164641 , 0.617107114025 , 0.624688901149 , 0.632120558829 , 0.639405059827 , 0.646545318041 , 0.65354418967 , 0.660404474355 , 0.667128916302 , 0.673720205377 , 0.680180978184 , 0.686513819117 , 0.692721261399 , 0.698805788088 , 0.704769833076 , 0.710615782061 , 0.7163459735 , 0.721962699547 , 0.727468206966 , 0.732864698034 , 0.73815433142 , 0.743339223046 , 0.74842144694 , 0.753403036058 , 0.758285983103 , 0.763072241318 , 0.76776372527 , 0.772362311616 , 0.776869839852 , 0.781288113048 , 0.785618898573 , 0.789863928799 , 0.794024901795 , 0.798103482005 , 0.802101300916 , 0.806019957709 , 0.809861019898 , 0.813626023961 , 0.817316475947 , 0.820933852089 , 0.824479599383 , 0.827955136177 , 0.831361852731 , 0.834701111778 , 0.837974249066 , 0.841182573893 , 0.844327369632 , 0.847409894243 , 0.850431380777 , 0.85339303787 , 0.856296050222 , 0.859141579079 , 0.861930762689 , 0.864664716763 , 0.86734453492 , 0.869971289122 , 0.872546030105 , 0.875069787801 , 0.877543571747 , 0.879968371489 , 0.882345156978 , 0.884674878962 , 0.88695846936 , 0.889196841638 , 0.891390891175 , 0.893541495621 , 0.895649515245 , 0.897715793284 , 0.899741156277 , 0.901726414396 , 0.90367236177 , 0.905579776804 , 0.90744942249 , 0.909282046711 , 0.911078382541 , 0.912839148538 , 0.914565049033 , 0.916256774408 , 0.917915001376 , 0.91954039325 , 0.921133600209 , 0.922695259557 , 0.924225995977 , 0.925726421786 , 0.927197137173 , 0.928638730444 , 0.930051778255 , 0.931436845846 , 0.93279448726 , 0.934125245574 , 0.935429653107 , 0.93670823164 , 0.937961492623 , 0.939189937375 , 0.940394057291 , 0.941574334035 , 0.942731239735 , 0.943865237166 , 0.944976779944 , 0.9460663127 , 0.947134271262 , 0.948181082827 , 0.949207166135 , 0.950212931632 , 0.951198781638 , 0.952165110506 , 0.95311230478 , 0.954040743351 , 0.954950797606 , 0.95584283158 , 0.956717202098 , 0.957574258919 , 0.958414344879 , 0.959237796022 , 0.960044941739 , 0.960836104901 , 0.961611601982 , 0.962371743193 , 0.963116832599 , 0.963847168246 , 0.964563042278 , 0.965264741055 , 0.965952545265 , 0.96662673004 , 0.967287565061 , 0.967935314672 , 0.968570237982 , 0.969192588967 , 0.969802616578 , 0.970400564832 , 0.970986672918 , 0.971561175286 , 0.972124301745 , 0.972676277553 , 0.973217323507 , 0.973747656034 , 0.974267487274 , 0.974777025165 , 0.97527647353 , 0.975766032154 , 0.976245896869 , 0.976716259625 , 0.977177308575 , 0.977629228144 , 0.978072199106 , 0.978506398655 , 0.978932000477 , 0.979349174818 , 0.979758088554 , 0.980158905256 , 0.980551785255 , 0.980936885708 , 0.981314360662 , 0.981684361111 , 0.98204703506 , 0.982402527584 , 0.982750980885 , 0.983092534347 , 0.983427324598 , 0.983755485558 , 0.984077148495 , 0.98439244208 , 0.984701492433 , 0.98500442318 , 0.985301355495 , 0.985592408157 , 0.98587769759 , 0.986157337914 , 0.986431440988 , 0.986700116458 , 0.986963471797 , 0.98722161235 , 0.987474641379 , 0.987722660097 , 0.987965767715 , 0.98820406148 , 0.988437636713 , 0.988666586845 , 0.988891003462 , 0.989110976331 , 0.989326593446 , 0.989537941057 , 0.989745103704 , 0.989948164255 , 0.990147203939 , 0.990342302372 , 0.990533537598 , 0.990720986113 , 0.990904722898 , 0.991084821452 , 0.991261353815 , 0.991434390603 , 0.991604001033 , 0.991770252951 ,
 0.991933212861 , 0.992092945948 , 0.992249516109 , 0.992402985972 , 0.992553416929 , 0.992700869153 , 0.992845401628 , 0.992987072167 , 0.993125937443 , 0.993262053001 , 0.993395473291 , 0.993526251682 , 0.993654440487 , 0.993780090984 , 0.993903253434 , 0.994023977105 , 0.994142310287 , 0.994258300314 , 0.994371993586 , 0.994483435579 , 0.994592670874 , 0.994699743164 , 0.994804695281 , 0.994907569207 , 0.995008406093 , 0.995107246275 , 0.99520412929 , 0.995299093892 , 0.99539217807 , 0.995483419057 , 0.995572853352 , 0.995660516729 , 0.995746444255 , 0.995830670302 , 0.995913228562 , 0.995994152058 , 0.996073473162 , 0.996151223602 , 0.996227434481 , 0.996302136284 , 0.996375358891 , 0.996447131594 , 0.996517483102 , 0.996586441557 , 0.996654034543 , 0.996720289098 , 0.996785231725 , 0.996848888402 , 0.996911284592 , 0.996972445255 , 0.997032394855 , 0.997091157374 , 0.997148756317 , 0.997205214725 , 0.997260555181 , 0.997314799823 , 0.997367970349 , 0.997420088028 , 0.997471173708 , 0.997521247823 , 0.997570330405 , 0.997618441086 , 0.997665599112 , 0.997711823347 , 0.997757132281 , 0.997801544037 , 0.997845076382 , 0.997887746728 , 0.997929572145 , 0.997970569364 , 0.998010754783 , 0.998050144477 , 0.998088754203 , 0.998126599406 , 0.998163695223 , 0.998200056494 , 0.998235697763 , 0.998270633288 , 0.998304877043 , 0.998338442727 , 0.998371343765 , 0.998403593319 , 0.99843520429 , 0.998466189321 , 0.998496560807 , 0.998526330898 , 0.998555511501 , 0.99858411429 , 0.998612150705 , 0.998639631962 , 0.998666569054 , 0.998692972756 , 0.99871885363 , 0.998744222027 , 0.998769088097 , 0.998793461786 , 0.998817352843 , 0.998840770826 , 0.998863725102 , 0.998886224852 , 0.998908279078 , 0.9989298966 , 0.998951086067 , 0.998971855955 , 0.998992214571 , 0.999012170059 , 0.999031730403 , 0.999050903425 , 0.999069696797 , 0.999088118034};

M2MEventDriven::M2MEventDriven() {
	SetApplicationType(Application::APPLICATION_TYPE_M2M_ED);
}

M2MEventDriven::~M2MEventDriven() {
	Destroy();
}

void
M2MEventDriven::DoStart (void)
{
	Simulator::Init()->Schedule(0.0, &M2MEventDriven::Send, this);
}

void
M2MEventDriven::DoStop (void)
{}

void
M2MEventDriven::ScheduleTransmit (double time)
{
	if ( (Simulator::Init()->Now () + time) < GetStopTime () )
	{
		Simulator::Init()->Schedule(time, &M2MEventDriven::Send, this);
	}
}


void
M2MEventDriven::Send (void)
{
	//CREATE A NEW PACKET (ADDING UDP, IP and PDCP HEADERS)
	Packet *packet = new Packet ();
	int uid = Simulator::Init()->GetUID ();

	packet->SetID(uid);
	packet->SetTimeStamp (Simulator::Init()->Now ());
	packet->SetSize (PKGSIZE);

	PacketTAGs *tags = new PacketTAGs ();
	tags->SetApplicationType(PacketTAGs::APPLICATION_TYPE_M2M_ED);
	tags->SetApplicationSize (packet->GetSize ());
	packet->SetPacketTags(tags);


	UDPHeader *udp = new UDPHeader (GetClassifierParameters ()->GetSourcePort (),
			GetClassifierParameters ()->GetDestinationPort ());
	packet->AddUDPHeader (udp);

	IPHeader *ip = new IPHeader (GetClassifierParameters ()->GetSourceID (),
			GetClassifierParameters ()->GetDestinationID ());
	packet->AddIPHeader (ip);

	PDCPHeader *pdcp = new PDCPHeader ();
	packet->AddPDCPHeader (pdcp);

	Trace (packet);

	GetRadioBearer()->Enqueue (packet);

	int t = 1;
	double r = ((double)rand())/RAND_MAX;
	while(r > P[t] && t<MAX_TTI) t++;
	ScheduleTransmit (t*0.001);
}
